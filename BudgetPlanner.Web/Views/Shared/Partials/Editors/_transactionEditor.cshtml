@model AddBudgetTransactionViewModel

@Html.AntiForgeryToken()
@Html.HiddenFor(model => model.IsModal)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.Created)
@Html.HiddenFor(model => model.BudgetId)

<div class="form-group">
    @Html.LabelFor(model => model.TransactionTypeId, Model.TransactionTypeLabel)
    @Html.DropDownListFor(model => model.TransactionTypeId, Model.TransactionTypes, "Please select", 
        new { @class = "form-control", id = "transactionDropDown" })
    @Html.ValidationMessageFor(model => model.TransactionTypeId)
</div>
<div class="form-group">
    @Html.LabelFor(model => model.Description, Model.DescriptionLabel)
    @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
    @Html.ValidationMessageFor(model => model.Description)
</div>
<div class="form-group" id="costDetails">
    @Html.LabelFor(model => model.Amount, Model.AmountLabel)
    @Html.DisplayIf(Model.Id == default, 
        Html.TextBoxFor(model => model.Amount, "{0:0.00}", new { @class = "form-control", type = "number" }),
        Html.HiddenFor(model => model.Amount))

    @if(Model.Id != default)
    {
        @Html.DisplayFor(model => model.Amount)
    }
    
    @Html.ValidationMessageFor(model => model.Amount)
</div>
<div class="form-group d-none" id="estimatedCost" 
     data-src="@Url.Action("CalculateNewBalance", "Budget")"
     data-parameters="@Json.Serialize(new { budgetId = Model.BudgetId }).GetString().ToBase64String(Encoding.UTF8)">

</div>
<div class="form-group">
    @Html.LabelFor(model => model.Tags, Model.TagsLabel)
    <tags-input input-text-id="@Html.IdFor(model => model.Tags)"
                input-text-name="@Html.NameFor(model => model.Tags)"
                input text-value="@Html.ValueFor(model => model.Tags)">

    </tags-input>
    @*@Html.TextBoxFor(model => model.Tags, null, DictionaryBuilder.Create<string, object>(builder => builder
        .Add("id", "tagsField")
        .Add("class", "form-control")
        .Add("data-role", "tagsinput"))
    .ToDictionary())*@
</div>
<div class="form-group form-check">
    @Html.CheckBoxFor(model => model.Active, new { @class = "form-check-input" })
    @Html.LabelFor(model => model.Active, Model.ActiveLabel)
</div>